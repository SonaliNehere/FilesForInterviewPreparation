20-08-2025	Starthealth
‚úÖ What is REST?

REST (Representational State Transfer) is an architectural style for building scalable web services that communicate using 
HTTP.

It uses resources (like users, products, orders) that can be accessed using URLs, and each resource returns a representation 
(usually JSON).

üîπ Key Principles of REST
Principle			Simple Explanation
Client‚ÄìServer		Frontend (UI) and backend (API) are separate
Stateless			Server doesn‚Äôt store session; each request is independent
Cacheable			Responses can be cached for performance
Uniform Interface	Standard way to interact (HTTP methods + URLs)
Layered System		Multiple layers like load balancer, security middleware
Resource-Based		Everything is treated as a resource with its own URI

üîπ HTTP Methods Mapping
HTTP Method		Action					Example
GET				Fetch data				/users
POST			Create data				/users
PUT				Update entire resource	/users/101
PATCH			Partial update			/users/101 (only name)
DELETE			Remove data				/users/101

üîπ Status Codes (Common Ones)
Code	Meaning
200 OK	
201 Created	
400 Bad Request	
401 Unauthorized	
403 Forbidden	
404 Not Found	
500 Server Error	

üîπ Example Request & Response

‚úÖ Request:

GET /products/5


‚úÖ Response (JSON):

{
  "id": 5,
  "name": "Laptop",
  "price": 45000
}

‚úÖ One-Line Interview Answer

REST is an architectural style that uses stateless, resource-based communication over HTTP using standard methods like GET,
 POST, PUT, and DELETE.

--------------------------------------------------------
1Ô∏è‚É£ String vs StringBuffer vs StringBuilder
Feature			String		StringBuffer		StringBuilder
Mutability		Immutable	Mutable				Mutable
Thread-Safe		‚úÖ Yes		‚úÖ Yes				‚ùå No
Performance		Slow		Slow (due to sync)	Fast
Usage			When data doesn‚Äôt change	Multi-thread environment	Single-thread environment

2Ô∏è‚É£ Second Largest Element in Array

‚úî Yes, you can use Integer instead of int
‚úî Yes, can do it in one scan and two variables

‚úÖ Code:

int first = Integer.MIN_VALUE, second = Integer.MIN_VALUE;
for (int n : arr) {
    if (n > first) {
        second = first;
        first = n;
    } else if (n > second && n != first) {
        second = n;
    }
}
System.out.println("Second Largest: " + second);

3Ô∏è‚É£ Class vs Object
Class ‚Üí Blueprint / template
Object ‚Üí Instance of class (real entity in memory)

4Ô∏è‚É£ Constructor
Special method used to initialize an object
Same name as class

No return type

5Ô∏è‚É£ HashMap vs HashSet
HashMap					HashSet
Stores key-value pairs	Stores only unique values
Allows one null key		Allows one null value
Uses hashing for keys	Internally uses HashMap

6Ô∏è‚É£ HashMap vs TreeMap
HashMap			TreeMap
No ordering		Sorted by keys
Faster			Slower
Uses hash table	Uses Red-Black Tree

7Ô∏è‚É£ How HashMap works

Computes hash of key ‚Üí finds bucket
Collision ‚Üí uses LinkedList / TreeNode

‚úÖ O(1) lookup average

8Ô∏è‚É£ OOPs Concepts

9Ô∏è‚É£ Java 15 Features

Sealed Classes (preview)
Records
Text Blocks
Pattern Matching for instanceof

üîü String equals() vs ==
==							equals()
Compares reference address	Compares actual content

Can we assign null?
Type				Null allowed?
int (primitive)		‚ùå No
Integer (wrapper)	‚úÖ Yes

REST API Implementation
Controller ‚Üí @GetMapping @PostMapping
Service ‚Üí business logic
Repository ‚Üí DB operations
JSON responses
Stateless
Uses HTTP verbs (GET/POST/PUT/DELETE)

‚úÖ Spring
Dependency Injection
Object dependencies are injected by Spring container.

@Autowired vs Constructor

If you define a constructor, Spring auto-injects dependencies
@Autowired optional since Spring 4.3+ when class has one constructor

MVC
Component	Role
Model		Business/Data
View		UI
Controller	Request handling

‚úÖ SQL
Second Highest Salary
SELECT MAX(salary) FROM employees
WHERE salary < (SELECT MAX(salary) FROM employees);

Joins
Join	Purpose
INNER	Common records only
LEFT	All left + matched right
RIGHT	All right + matched left
FULL	All records
CROSS	Cartesian product

Create Table
CREATE TABLE emp (
 id INT,
 name VARCHAR(30)
);

Add Primary Key
ALTER TABLE emp
ADD CONSTRAINT pk PRIMARY KEY(id);

‚úÖ Column must have unique + NOT NULL values
‚ùå If duplicates exist ‚Üí cannot make it primary key

CHAR vs VARCHAR
CHAR			VARCHAR
Fixed length	Variable length
Fast			Space efficient

View
Virtual table based on query
No real storage (except materialized view)

Index
Speeds up search queries
Slows insert/update/delete

SQL vs MongoDB
SQL				MongoDB
Relational		NoSQL Document store
Schema-based	Schema-less
Joins supported	Embedding instead of joins
ACID			High scalability

Foreign Key
Maintains referential integrity
Ensures child row must match parent key
====================================================================
20-08-2025	Accelya
‚úÖ 1Ô∏è‚É£ Comparable vs Comparator
Comparable				Comparator
Present inside class	Separate class
Only one sorting logic	Multiple sorting logics possible
Method: compareTo()		Method: compare()
java.lang package		java.util package

Example:

class A implements Comparable<A> {
    public int compareTo(A o) { return this.id - o.id; }
}

Comparator<A> comp = (o1, o2) -> o1.name.compareTo(o2.name);

‚úÖ 2Ô∏è‚É£ String .equals() vs ==
Operator	Compares
==			reference (memory address)
.equals()	value/content

‚úÖ 3Ô∏è‚É£ How to create Immutable Class

Rules:
Make class final
Make fields private + final
No setters
Return new copy of mutable objects in getters

‚úÖ 4Ô∏è‚É£ How to implement Method Overriding

Same method name
Same parameters
Inherited from parent class
Runtime polymorphism

‚úÖ 5Ô∏è‚É£ How to prevent method from overriding

Use final keyword:
public final void show(){}


Other ways:
Make class final ‚Üí no inheritance
Make constructor private ‚Üí no inheritance

‚úÖ 6Ô∏è‚É£ static Keyword

Used for:

Memory shared among all objects
static method / variable / block
Cannot access non-static variables directly.

‚úÖ 7Ô∏è‚É£ String.trim() Method
Removes leading and trailing spaces only.

‚úÖ 8Ô∏è‚É£ String.intern() Method
Stores string in String Constant Pool
If already exists ‚Üí returns reference of SCP version.

‚úÖ 9Ô∏è‚É£ How to Create a Thread

Two ways:

class A extends Thread {
  public void run(){}
}


OR

class A implements Runnable {
  public void run(){}
}

‚úÖ üîü Can we start a Thread twice?

‚ùå No.

thread.start(); // OK
thread.start(); // IllegalThreadStateException

‚úÖ 1Ô∏è‚É£1Ô∏è‚É£ wait() vs sleep()
wait()						sleep()
Releases lock				Does NOT release lock
Used for synchronization	Used for delay
Belongs to Object class		Belongs to Thread class

‚úÖ 1Ô∏è‚É£2Ô∏è‚É£ Execution Flow Order
1Ô∏è‚É£ static block  ‚Üí loads class
2Ô∏è‚É£ instance block ‚Üí object creation
3Ô∏è‚É£ constructor  ‚Üí initialization

‚úÖ 1Ô∏è‚É£3Ô∏è‚É£ Access Modifiers
Modifier	Scope
private		same class
default		same package
protected	same package + subclass
public		everywhere


‚úÖ SQL INTERVIEW QUESTIONS & ANSWERS
‚úÖ 1Ô∏è‚É£ Second Highest Salary Query

Method 1:

SELECT MAX(salary)
FROM employee
WHERE salary < (SELECT MAX(salary) FROM employee);


Method 2 (with limit):

SELECT DISTINCT salary
FROM employee
ORDER BY salary DESC
LIMIT 1 OFFSET 1;

‚úÖ 2Ô∏è‚É£ Transaction ‚Äî What happens on Success and Failure?
Phase	Action
Success	COMMIT ‚Üí changes saved permanently
Failure	ROLLBACK ‚Üí undo all operations

ACID properties followed:
Atomicity ‚úÖ
Consistency ‚úÖ
Isolation ‚úÖ
Durability ‚úÖ
ACID ensures reliable transactions: either fully complete, keep data valid, run independently, and remain permanently saved 
after commit.

====================================================================
16-09-2025	Transbank
‚úÖ Waterfall Model

Waterfall is a linear and sequential software development model.
Work flows stage by stage, and each phase must be completed before moving to the next.

üîπ Phases in Waterfall

Requirements
Design
Implementation (Development)
Testing
Deployment
Maintenance

üîπ Characteristics

Plan everything upfront
Changes are costly once development starts
Best suited for projects with fixed and clear requirements

‚úÖ Advantages

Simple to manage and understand
Well-documented process
Good for small teams and predictable environments

‚ùå Disadvantages

No early working product
Customer feedback comes very late
Not adaptable to changes during development

‚úÖ Agile Model

Agile is an iterative and incremental model.
Development is divided into small cycles called Sprints (usually 2‚Äì4 weeks).

üîπ Key Practices

Continuous customer involvement
Working product delivered early and frequently
Flexible to changing requirements

üîπ Agile Frameworks
Scrum (most popular)
Kanban
XP, SAFe, etc.

‚úÖ Advantages

High customer satisfaction
Early delivery of usable software
Adapts to requirement changes
Better collaboration within teams

‚ùå Disadvantages

Requires experienced and skilled team
Hard to predict exact cost & timeline upfront
Documentation may be less detailed

üîÅ Quick Comparison Table
Factor					Waterfall					Agile
Process					Sequential					Iterative & Incremental
Flexibility				Rigid						Highly flexible
Customer Involvement	Low							High
Working Product			Delivered at the end		Delivered early & frequently
Best For				Stable requirements			Changing requirements
Risk					High						Lower

üìå Real-world Usage
Model	Examples
Waterfall	Banking systems, Government projects, Hardware systems
Agile	E-commerce, Mobile apps, Startups

--------------------------------------------------------------

‚úÖ What is JWT Token?

JWT (JSON Web Token) is a compact, secure token format used to share information between a client and server.
It is mainly used for authentication and authorization in web applications.

When a user logs in successfully, the server generates a JWT and sends it to the client.
The client then sends this token with every request to access protected resources.

üîê Key Features of JWT

‚úî Stateless ‚Äî Server does not store session data
‚úî Signed ‚Äî ensures data integrity (usually using HS256 or RS256)
‚úî Compact ‚Äî easily sent in headers, URL or localStorage

üìå Structure of a JWT

JWT has three parts separated by dots:

Header.Payload.Signature


Example:

eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.
eyJ1c2VySWQiOjEsInJvbGUiOiJhZG1pbiJ9.
abc123xyz890signature

üîπ Header
Contains algorithm & token type (JWT)

üîπ Payload
Contains user data (claims) like:
id, email, role, expiry time

üîπ Signature
Used to verify that the token is not altered

üîÅ How JWT Works (Flow)

1Ô∏è‚É£ User logs in with username/password
2Ô∏è‚É£ Server verifies and generates JWT signed with a secret key
3Ô∏è‚É£ Client stores token (ex: localStorage / cookies)
4Ô∏è‚É£ Client sends token in Authorization header:

Authorization: Bearer <token>


5Ô∏è‚É£ Server verifies signature and allows access

‚úÖ Why is JWT used?
Benefit					Description
Stateless				No session storage on server
Secure					Signed tokens prevent tampering
Fast					Less database calls
Cross-domain capable	Used widely in modern web apps

üìå Example Usage
Login authentication in Angular/React + Spring Boot/Node.js apps
API access control (role/permission-based)
Single Sign-On (SSO)

No session storage on server means the server does not maintain user authentication state.
The JWT itself contains all necessary information, so the server only verifies the token without storing session details.
---------------------------------------------------------------------------

‚úÖ Key Points of REST API

1Ô∏è‚É£ Stateless
Server does not store client state
Every request must contain all necessary information

2Ô∏è‚É£ Client-Server Architecture
Client and server are independent
Client handles UI, server handles data & logic

3Ô∏è‚É£ Resource-Based
Everything is treated as a resource (User, Product, Order, etc.)
Each resource is identified by a URI
Example: /users/101

4Ô∏è‚É£ Uses Standard HTTP Methods
Method	Purpose
GET		Retrieve resource
POST	Create resource
PUT		Update resource (complete)
PATCH	Partially update resource
DELETE	Remove resource

5Ô∏è‚É£ Uniform Interface
Consistent rules to interact with resources
Predictable and easy-to-understand API structure

6Ô∏è‚É£ Representation in Multiple Formats
JSON (most common), XML, YAML, etc.

7Ô∏è‚É£ Stateless Communication
No client data stored on server (important point repeated because crucial)

8Ô∏è‚É£ Cacheable
Responses can be stored in cache to improve performance

9Ô∏è‚É£ Layered System
You can have multiple layers (Load balancer, authentication layer, etc.)
Client should not know backend complexity

10Ô∏è‚É£ Code On Demand (Optional)
Server can send executable code (rarely used)

üîÅ REST API vs SOAP (Quick Difference)
REST			SOAP
Lightweight		Heavy
Mostly JSON		XML only
Fast			Slower
Less secure		More secure (WS-Security)
Easy to scale	Complex

üìå One-Line Interview Definition

‚ÄúREST is an architectural style for building scalable, stateless APIs using standard HTTP methods and resource-based 
communication.‚Äù
-------------------------------------------------------------------------

‚úÖ Java Memory Model (JMM)

The Java Memory Model defines how threads interact through memory and ensures visibility, ordering, and atomicity of shared
 variables.
Java Memory Model defines how threads read/write shared variables using working memory and main memory.
Due to caching, threads may not see latest updates ‚Üí causing visibility and ordering issues.
JMM provides rules like happens-before and tools like volatile, synchronized, locks, and atomic classes to ensure atomicity, 
visibility, and ordering in concurrent programs.
----------------------------------------------------------------

‚ÄúIf you have a latency of 5 ms, how will you debug it?‚Äù

You never start debugging randomly ‚Äî you isolate where the latency is coming from:

‚úÖ Step-by-Step Debugging Strategy
1Ô∏è‚É£ Measure & Identify Where the Delay Is

Break latency into layers:

Layer					Tool							What to check
Client (browser/app)	DevTools, FCP, DOM timings		UI rendering delay?
Network					Ping, traceroute, Wireshark		Slow hops? Packet loss?
API/Backend				Application logs, APM tools		Execution bottlenecks?
Database				Query profiler, slow logs		Index issues? Large scans?
External Services		Logs & latency from APIs		Dependency delays?
Infrastructure			CPU, Memory, GC logs			Resource starvation?

üëâ First detect where those 5ms come from.
Is it network? backend? database?

2Ô∏è‚É£ Instrumentation & Logging

Use timestamps for each step:

T1: Request in
T2: Business logic start
T3: DB query start
T4: DB query end
T5: Response send


Then calculate latency segments.

‚úÖ Example:

Network = 1ms

Business logic = 2ms

DB Query = 2ms
= Total 5ms ‚úÖ

Now you know exactly what to optimize.

3Ô∏è‚É£ Common Sources & Fixes
Cause					Diagnosis				Fix
DB query slow			EXPLAIN plan			Add index, caching
Too many service calls	Trace logs / APM		Batch calls, remove unnecessary ones
Serialization cost		Profiling tools			Optimize JSON/XML parsing
Thread blocking			Thread dump analysis	Async processing
GC pause				GC logs					Tune heap, switch GC algorithm
Network overhead		Trace route				Reduce payloads, compression
4Ô∏è‚É£ Use Performance Tools

üìå Typical Tools:

APM: New Relic, Datadog, AppDynamics
Profilers: JMC, VisualVM for Java
Network: Wireshark, cURL, Ping
DB Profilers: MySQL EXPLAIN, PG analyze
Logging: ELK stack, Jaeger (distributed tracing)
Distributed tracing is especially powerful in microservices ‚úÖ

5Ô∏è‚É£ Reproduce Under Load

Test with similar traffic:
JMeter
Locust
k6

Latencies may only appear when system is stressed!

üî• Short Interview Answer (20 seconds)

First, measure where the 5ms is coming from by breaking latency into client, network, backend, database, and external services.
Use tracing and logging to isolate delays, then profile the slowest component.
Fix issues like inefficient DB queries, network bottlenecks, serialization overhead, or thread blocking depending on root cause.
--------------------------------------------------------------------

‚úÖ How to Upgrade Angular Version with Zero Downtime (Simple Explanation)
üîπ Problem:

If you upgrade directly on production ‚Üí Website may go down temporarily.

So we use a safe upgrade + deployment strategy.

‚úÖ Simple 4-Step Method
‚úÖ Step 1Ô∏è‚É£ ‚Äî Upgrade in a Separate Branch

Do NOT touch the live production code.
Create a new branch and upgrade there:
ng update @angular/cli @angular/core


Fix errors and test completely.

üëâ Production still running normally.

‚úÖ Step 2Ô∏è‚É£ ‚Äî Deploy New Version on Separate Server
Deploy the upgraded version to a staging/backup environment
Test live functionality with real API
üëâ Still no impact to real users.

‚úÖ Step 3Ô∏è‚É£ ‚Äî Switch Traffic Gradually

Use Load Balancer / Server Routing:

Server	Status
Old Angular Version	Serving users
New Angular Version	Tested and ready

‚úÖ Slowly move users to new version
‚úÖ If something breaks ‚Üí switch back instantly

No downtime ‚úÖ
Rollback is safe ‚úÖ

‚úÖ Step 4Ô∏è‚É£ ‚Äî Browser Cache Safety (Very Important)

Angular build creates files with different hash names:

main.abc123.js  ‚Üí Old users still using this
main.xyz456.js  ‚Üí New users get this


‚úî Both versions work at the same time
‚úî Browser doesn‚Äôt break
‚úî No blank screen issue

‚úÖ One-Line Interview Answer

‚ÄúI upgrade Angular on a separate branch and deploy the upgraded build to a standby server. Using a load balancer, I gradually 
shift user traffic to the new version. Angular‚Äôs hashed files ensure cache-safe switching, so users never experience downtime.‚Äù

======================================================================
30-09-2025	Sharekhan , Kanjur
‚úÖ What is HTTP?

A request-response protocol ‚Äî the client must request every time it needs data.
‚úî Good for REST APIs
‚úî Stateless connection
‚ùå Not suitable for real-time communication

Example:
Client -> ‚ÄúGive me data‚Äù
Server -> ‚ÄúHere is data‚Äù
Connection ends

‚úÖ What is WebSocket?

A persistent, full-duplex connection where both client & server can send data anytime.
‚úî Best for real-time apps
‚úî Low latency
‚úî Server can push updates

Example:

Client connects once
Both sides keep exchanging messages continuously

üõ† When to Use?
Use Case								Recommended
CRUD operations							‚úÖ HTTP
E-commerce product APIs					‚úÖ HTTP
Live chat, stock market, notifications	‚úÖ WebSocket
Multiplayer games						‚úÖ WebSocket
IoT real-time updates					‚úÖ WebSocket

üîê Security
HTTP				WebSocket
HTTPS (TLS)			WSS (WebSocket Secure)

‚úÖ Summary Statement for Interview

HTTP is a request-response protocol ideal for standard web services, while WebSocket provides persistent full-duplex 
communication ideal for real-time applications like chat, gaming, notifications, and live dashboards.

----------------------------------------------------------------------

‚úÖ What is TCP?

TCP (Transmission Control Protocol) is a connection-oriented, reliable transport layer protocol that ensures error-free,
 ordered, and complete delivery of data between devices in a network.

Think of TCP like a phone call üìû
‚Äî connection established ‚Üí talk ‚Üí end call

TCP is a connection-oriented, reliable transport protocol that guarantees complete and ordered delivery of data using 
mechanisms like three-way handshake, acknowledgments, flow control, and retransmissions.
================================================================
07-10-2025	Nimbal, Andheri, Face to face

YES, in most cases increasing the number of columns increases query execution time, but HOW MUCH depends on:

‚úÖ Row size (more columns = more data to transfer from disk ‚Üí memory ‚Üí network)
‚úÖ Type of columns (TEXT/BLOB are heavier than INT/VARCHAR)
‚úÖ Index usage (wider rows = fewer rows fit in a data page ‚Üí more I/O)
‚úÖ SELECT pattern (SELECT * vs needed columns)

But sometimes the increase is very small if:
Columns are lightweight and efficiently indexed
The query is already optimized

‚úÖ Why Time Increases?
Reason						Explanation
More Data Pages				Fewer rows fit per page ‚Üí more disk reads
More Network Transfer		DB needs to send more bytes to application
Index Efficiency drops		Large rows reduce index performance
Extra CPU for processing	Sorting, filtering over bigger data

‚úÖ How to Reduce Query Time
‚úÖ 1Ô∏è‚É£ Avoid SELECT *

Fetch only required columns

SELECT id, name FROM users;   -- Good
SELECT * FROM users;          -- Slower

‚úÖ 2Ô∏è‚É£ Add Proper Indexes

Index columns used in:
‚úî WHERE
‚úî JOIN
‚úî ORDER BY
‚úî GROUP BY

CREATE INDEX idx_salary ON employees(salary);


But avoid indexing huge columns (TEXT/BLOB).

‚úÖ 3Ô∏è‚É£ Pagination

Fetch limited data

SELECT id, name
FROM users
LIMIT 50 OFFSET 0;

‚úÖ 4Ô∏è‚É£ Normalization (Split too-wide tables)

If table has many columns but rarely used together ‚Üí separate tables

Example:

User basic info ‚Üí Table A

User metadata (large text, images) ‚Üí Table B

Join only when needed

‚úÖ 5Ô∏è‚É£ Use Covering Index

Index includes all required columns ‚Üí query served directly from index

CREATE INDEX idx_email_status ON users(email, status);

‚úÖ 6Ô∏è‚É£ Remove Unnecessary Columns

Especially:
LONGTEXT, BLOB, JSON

Store large items in:
Separate table
External file storage

‚úÖ 7Ô∏è‚É£ Proper Data Types

Use smallest possible data types:

Bad							Good
BIGINT(20) for ID			INT
TEXT for small strings		VARCHAR
DOUBLE for money			DECIMAL

‚úÖ 8Ô∏è‚É£ Enable Caching

‚úî MySQL query cache (if MySQL version supports)
‚úî App-side caching (Redis / KeyDB)

üìå Summary
Action							Performance Impact
Increase columns				‚¨Ü Slower
Fetch only needed columns		‚úÖ Faster
Proper indexing					‚úÖ Much faster
Pagination						‚úÖ Faster
Normalize heavy columns			‚úÖ Faster

‚úÖ Interview Friendly Answer

Yes, increasing the number of columns usually increases query execution time because MySQL has to read and transmit more data.
 To reduce it, avoid SELECT *, use proper indexing, pagination, normalization, data type optimization, and caching.
==============================================================================
12-10-2025	Neosoft
‚úÖ Optional.of() vs Optional.ofNullable()
Method						Accepts null?	Behavior if value is null		When to use
Optional.of(value)			‚ùå No			Throws NullPointerException		When you're sure value is never null
Optional.ofNullable(value)	‚úÖ Yes			Returns Optional.empty()		When value may be null

----------------------------------------------------------------

‚úÖ What is @Transactional?

It ensures that a group of database operations execute as a single unit of work.

If all operations succeed ‚Üí commit
If any operation fails ‚Üí rollback entire transaction

‚úÖ Where can we use it?

On service layer methods (recommended)
On class level (applies to all public methods)

@Transactional manages transactions automatically, ensuring all DB operations succeed or fail together. It provides features 
like rollback, propagation, and isolation to handle concurrency and data integrity in multi-threaded environments.

------------------------------------------------------------------

‚úÖ Singleton Design Pattern (Java)

A creational design pattern that ensures:

1Ô∏è‚É£ Only one instance of a class exists in the whole application
2Ô∏è‚É£ Global access point to that instance

Quick Interview Answer ‚úÖ

‚ÄúSingleton pattern ensures only one instance of a class is created and provides global access to it. It is commonly used for
 shared resources like DB connections and logging. Thread-safe implementations use double-checked locking with volatile or 
 Enum-based Singleton which is the most robust option.‚Äù
 
 ‚úÖ Enum Singleton Example
public enum DatabaseConnection {

    INSTANCE; // Single instance

    private String connection;

    // Constructor acts like initialization block
    DatabaseConnection() {
        connection = "Connected to DB";
    }

    public String getConnection() {
        return connection;
    }

    public void query(String sql) {
        System.out.println("Executing: " + sql);
    }
}

‚úÖ How to Use It
public class Main {
    public static void main(String[] args) {
        DatabaseConnection db = DatabaseConnection.INSTANCE;

        System.out.println(db.getConnection());
        db.query("SELECT * FROM users");
    }
}

‚úÖ Why Enum Singleton is Best
Benefit							Reason
Thread-safe						Enum handles it automatically
Prevents reflection attack		Reflection cannot create another enum instance
Serialization safe				No special readResolve() logic required
Very simple						No complex locking or lazy code
Quick Interview Line ‚úÖ

‚ÄúEnum-based Singleton is the most robust implementation in Java as it prevents multiple instances even in cases of reflection 
and serialization, while ensuring thread-safety automatically.‚Äù

‚úÖ Bill Pugh (Inner Static Helper Class) ‚úÖ
public class Singleton {
    private Singleton() {}

    private static class Holder {
        private static final Singleton INSTANCE = new Singleton();
    }

    public static Singleton getInstance() {
        return Holder.INSTANCE;
    }
}

‚úî Thread-safe
‚úî Lazy loading
‚úî No synchronization overhead
‚úî Very clean code

Enum Singleton is the best & recommended by Joshua Bloch (creator of Java Collections)
Except when you need lazy initialization ‚Äî then Bill Pugh is the best.

======================================================================================
29-10-2025	Godrej Capital

‚úÖ Aggregation (Has-A Relationship)

üîπ Weak relationship between two objects
üîπ One object can exist independently from the other
üîπ If the container object is destroyed, the contained object can still exist

üìå Example: A Department has Teachers. Even if the department is deleted, teachers still exist.

class Teacher {
    String name;
    
    Teacher(String name) {
        this.name = name;
    }
}

class Department {
    String deptName;
    Teacher teacher; // Aggregation
    
    Department(String deptName, Teacher teacher) {
        this.deptName = deptName;
        this.teacher = teacher;
    }
}

public class Main {
    public static void main(String[] args) {
        Teacher t = new Teacher("Sonali");
        Department dept = new Department("Computer", t);

        // Teacher can exist without Department
    }
}

‚úÖ Composition (Strong Has-A Relationship)

üîπ Strong relationship
üîπ The part cannot exist without the whole
üîπ If the container object is destroyed ‚Üí contained object also destroyed

üìå Example: A House has Rooms. Rooms cannot exist without a House.

class Room {
    String roomType;

    Room(String roomType) {
        this.roomType = roomType;
    }
}

class House {
    private Room room; // Composition
    
    House() {
        room = new Room("Bedroom");
    }
}

public class Main {
    public static void main(String[] args) {
        House house = new House();
        // Room automatically destroyed when House is destroyed
    }
}

üÜö Quick Difference
Feature				Aggregation			Composition
Dependency			Weak				Strong
Lifetime			Independent			Dependent
Example				Teacher‚ÄìDepartment	Room‚ÄìHouse
Represented in UML	Hollow diamond ‚óá	Filled diamond ‚óÜ

üî• Interview-friendly Definition
Aggregation: A has-a relationship where the child can exist without the parent.
Composition: A strong has-a relationship where the child cannot exist without the parent.

-------------------------------------------------------------------------

‚úÖ What is Deadlock?

A deadlock is a situation in concurrent programming where two or more threads are permanently blocked, each waiting for a
 resource that the other thread holds.

üìå In simple words:
Thread A waits for Thread B‚Äôs resource, and Thread B waits for Thread A‚Äôs resource ‚Üí both are stuck forever.

üîÅ Classic Deadlock Example in Java
class A {}
class B {}

public class DeadlockDemo {
    public static void main(String[] args) {
        A a = new A();
        B b = new B();

        Thread t1 = new Thread(() -> {
            synchronized (a) {
                System.out.println("Thread 1 locked A");

                try { Thread.sleep(100); } catch (Exception e) {}

                synchronized (b) {
                    System.out.println("Thread 1 locked B");
                }
            }
        });

        Thread t2 = new Thread(() -> {
            synchronized (b) {
                System.out.println("Thread 2 locked B");

                try { Thread.sleep(100); } catch (Exception e) {}

                synchronized (a) {
                    System.out.println("Thread 2 locked A");
                }
            }
        });

        t1.start();
        t2.start();
    }
}


üìå Thread-1 locks A then waits for B
üìå Thread-2 locks B then waits for A

A deadlock can occur if all 4 exists:

1Ô∏è‚É£ Mutual Exclusion ‚Äì only one thread can access a resource
2Ô∏è‚É£ Hold and Wait ‚Äì thread holding some resource waits for another
3Ô∏è‚É£ No Preemption ‚Äì resource cannot be forcibly taken
4Ô∏è‚É£ Circular Wait ‚Äì circular chain of threads waiting for each other

Breaking even one of these avoids deadlock ‚úÖ

üîí How to Prevent / Avoid Deadlock
Strategy										Description
‚úÖ Acquire locks in fixed/global order			All threads lock resources in the same order
‚úÖ Use tryLock() with timeout (ReentrantLock)	Gives up if lock isn‚Äôt available
‚úÖ Avoid unnecessary locks						Reduce locking scope using smaller synchronized blocks
‚úÖ Use Lock Timeout								Break the deadlock cycle
‚úÖ Thread communication							Use wait/notify to avoid waiting conditions
‚úÖ Immutability									If objects are immutable ‚Üí no lock needed
‚úÖ Example: 										Fix Deadlock using lock ordering

class A {}
class B {}

public class AvoidDeadlock {
    private final Object lock1 = new Object();
    private final Object lock2 = new Object();

    public void method1() {
        synchronized (lock1) {
            synchronized (lock2) {
                System.out.println("method1 executed");
            }
        }
    }

    public void method2() {
        synchronized (lock1) { // same order: lock1 ‚Üí lock2
            synchronized (lock2) {
                System.out.println("method2 executed");
            }
        }
    }
}


‚û° Both threads lock resources in same order, so no deadlock ‚úÖ

üî• Interview One-Line Answer

Deadlock is a situation where two or more threads are blocked forever, each waiting for a resource that the other thread holds.
Avoid by using lock ordering, lock timeout, tryLock, minimizing shared resources, and thread communication.

---------------------------------------------------------------

volatile guarantees visibility of changes across threads but not atomicity.
Atomic classes guarantee atomic compound operations like increment, using lock-free CAS mechanism.

--------------------------------------------------------------------

‚úÖ SOLID Design Principles

These are the top 5 object-oriented design principles:

Principle	Full Form							Meaning
S			Single Responsibility Principle		One class ‚Üí one responsibility
O			Open/Closed Principle				Open for extension, closed for modification
L			Liskov Substitution Principle		Subclasses should replace parent class without breaking behavior
I			Interface Segregation Principle		Many small interfaces > one large interface
D			Dependency Inversion Principle		Depend on abstractions, not concrete classes

üîπ 1Ô∏è‚É£ Single Responsibility Principle (SRP)

üìå One class = One responsibility = One reason to change

Real-World Example:
üõç E-commerce:

Order calculation should not handle invoice printing

class OrderCalculator {
    public double calculateTotal() { return 0.0; }
}

class InvoicePrinter {
    public void printInvoice() {}
}


‚úÖ Modifying invoice format won‚Äôt affect calculation

üìå Interview Question:
‚û° How would you refactor a God class with too many responsibilities?

üîπ 2Ô∏è‚É£ Open/Closed Principle (OCP)

üìå Software entities should be:
‚úÖ Open for Extension
‚ùå Closed for Modification

Real-World Example
Payment methods: UPI ‚Üí now add Card, Wallet without changing old code

interface Payment {
    void pay(int amount);
}

class UpiPayment implements Payment {
    public void pay(int amount) {}
}

class CardPayment implements Payment {
    public void pay(int amount) {}
}


‚úÖ Add new payment types without touching existing code

üìå Interview Question:
‚û° How do you add new shapes in a drawing app without changing existing classes?

üîπ 3Ô∏è‚É£ Liskov Substitution Principle (LSP)

üìå Subclass should behave like parent without breaking functionality

‚ùå Bad Example:
Square extending Rectangle (width vs height issue)

‚úÖ Good Example:
Shape hierarchy that preserves behavior

interface Bird {
    void fly();
}

class Sparrow implements Bird {
    public void fly() {}
}

// Ostrich should NOT implement Bird.fly()


üìå Interview Question:
‚û° When does inheritance violate LSP?

üîπ 4Ô∏è‚É£ Interface Segregation Principle (ISP)

üìå No class should be forced to implement unnecessary methods
‚ùå Avoid fat interfaces

interface Printer {
    void print();
}

interface Scanner {
    void scan();
}

class BasicPrinter implements Printer {
    public void print() {}
}


‚úÖ Devices only implement what they actually support

üìå Interview Question:
‚û° Why do microservices follow small, focused APIs?

üîπ 5Ô∏è‚É£ Dependency Inversion Principle (DIP)

üìå High-level modules should depend on abstractions not concrete classes
üìå Achieved via constructor injection

interface NotificationService {
    void send(String message);
}

class EmailService implements NotificationService {
    public void send(String message) {}
}

class NotificationClient {
    private NotificationService service;

    public NotificationClient(NotificationService service) {
        this.service = service;
    }
}


‚úÖ Easily switch to SMS, Push Notifications later

üìå Interview Question:
‚û° How does Spring Boot support DIP automatically?

--------------------------------------------------------------------------------

‚úÖ Angular Directives

A directive is a class that can modify the structure or behavior of the DOM (HTML).

üìå In short:

Directives tell Angular what to do with a specific element in the DOM.

‚úÖ Types of Directives in Angular
Type						What it does										Example
Component Directive			Has a template, used to create UI elements			@Component
Structural Directive		Changes DOM layout (add/remove elements)			*ngIf, *ngFor, *ngSwitch
Attribute Directive			Changes appearance/behavior of existing element		ngClass, ngStyle
--------------------------------------------------------------------------------

‚úÖ Angular App Optimization Techniques
‚úÖ 1Ô∏è‚É£ Lazy Loading Modules

Load feature modules only when needed ‚Üí reduces initial bundle size

{
  path: 'products',
  loadChildren: () => import('./products/products.module').then(m => m.ProductsModule)
}

‚úÖ 2Ô∏è‚É£ OnPush Change Detection Strategy

Angular checks component updates only when inputs change
instead of checking the whole tree

@Component({
  selector: 'app-demo',
  changeDetection: ChangeDetectionStrategy.OnPush
})


‚úÖ Improves performance especially in large apps

‚úÖ 3Ô∏è‚É£ Use trackBy in *ngFor

Prevents re-rendering entire list when only one item changes

<li *ngFor="let item of items; trackBy: trackById">
  {{ item.name }}
</li>

trackById(index: number, item: any) {
  return item.id;
}

‚úÖ 4Ô∏è‚É£ Enable Production Mode + AOT
ng build --prod


‚úÖ Tree shaking
‚úÖ Minification
‚úÖ Faster execution

‚úÖ 5Ô∏è‚É£ Avoid Memory Leaks

Unsubscribe from Observables

ngOnDestroy() {
  this.sub.unsubscribe();
}


‚úÖ Use async pipe wherever possible

{{ data$ | async }}

‚úÖ 6Ô∏è‚É£ Serve Images in Optimized Way

‚úî Lazy load images
‚úî Use compressed images
‚úî Use WebP format for best performance

‚úÖ 7Ô∏è‚É£ Use Pure Pipes

Avoid recalculating values same input

@Pipe({
  name: 'custom',
  pure: true
})

‚úÖ 8Ô∏è‚É£ Avoid Functions Inside Templates

‚ùå Functions in HTML run on every change detection cycle

‚úÖ Use getters / pre-computed variables

‚úÖ 9Ô∏è‚É£ Preloading Strategy for Faster Navigation
RouterModule.forRoot(routes, {
  preloadingStrategy: PreloadAllModules
});


‚úÖ Good balance between performance & usability

‚úÖ üîü Debounce User Inputs

Reduces unnecessary API calls while typing

searchControl.valueChanges
  .pipe(debounceTime(300))
  .subscribe(...)

‚úÖ 1Ô∏è‚É£1Ô∏è‚É£ Server-Side Rendering (SSR)

Use Angular Universal
‚úÖ Faster first content paint
‚úÖ SEO improvement

üöÄ Bonus Performance Tips
Area					Solution
Large data				Virtual scrolling
HTTP requests			Caching with RxJS
Styles					Avoid deep CSS selectors
Reused components		Use trackBy / OnPush
Dependency injections	Tree-shakable providers
----------------------------------------------------------------------------------

‚úÖ What is a User?

A User is an identity that represents a real person or system accessing an application.

‚úî Has a unique username / email
‚úî Has login credentials (password, token, OAuth, etc.)
‚úî Actions are tracked for security & auditing

Example:
Sonali logs in ‚Üí She is a User
A background service accessing API ‚Üí System user

‚úÖ What is a Role?
A Role defines a set of permissions (what actions a user can perform).

‚úî Used for Authorization
‚úî One role ‚Üí many users
‚úî One user can have multiple roles

Examples:

admin ‚Üí can create, update, delete data
user ‚Üí can only read data
manager ‚Üí approve data

‚úÖ Roles abstract permissions, so we do not assign privileges one by one to every user.

üîÅ Example Comparison
Feature	User					Role
Who?	Actual person/system	Group of permissions
Purpose	Identity				Authorization
Count	Many users				Limited roles

üëÄ Quick example in an app:

User: Sonali
Role: ADMIN
Permissions: Add products, Delete orders

üåê What is IAM (Identity and Access Management)?

IAM is a framework/service used to manage:
‚úÖ Who can access
‚úÖ What they can access
‚úÖ How they authenticate
‚úÖ What actions they are allowed to do

It covers:

Authentication ‚Üí Who are you?

Authorization ‚Üí What can you do?

Used in:

AWS IAM
Azure AD
Google IAM
Keycloak, Okta, Auth0


User = Identity of a person/system accessing an application.
Role = Group of permissions that controls what a user can do.
IAM = System to authenticate users and authorize access securely.